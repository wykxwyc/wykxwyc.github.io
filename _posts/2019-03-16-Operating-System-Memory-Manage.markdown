---
layout:     post
title:      "操作系统（内存管理）"
subtitle:   "Operating System (memory management)"
date:       2019-03-13
author:     "wykxwyc"
header-img: "img/post-bg-operating-system.jpg"
tags:
    - OS
    - C++
---
> 考虑一个典型的指令执行周期：取指令->指令译码->取操作数->执行->存结果。
> 在整个过程中，内存单元制看到地址流，但并不知道这些地址是如何产生的或它们是什么地址。
> 相应地，可以忽略内存地址是如何由程序产生的，而只是对由运行中的程序产生的内存地址感兴趣。

这部分包括的内容：
* 基本硬件
* 符号内存地址到物理实际地址的绑定
* 逻辑地址与物理地址的差别
* 动态装载、动态链接代码和共享库

#### 多级页表和快表
>为了提高内存的空间利用率，页应该小，但是页小了页表就大了，页表很大之后，页表放置就成了问题。

假设计算机是32位的，内存大小最多是2^32=4G。如果页面尺寸为4K,那么就有4G/4K=1M=2^20个页面。

如果这1M个页表都要放在内存中，那么就需要4MB内存，如果系统并发10个线程，就需要40M内存。

实际上大部分逻辑地址是程序用不到的（假如一个hello word程序只用到了0~10这几个逻辑地址，那么它就不需要存除0-10以外的页号和页架号的对应关系）。

* 页表的查找：顺序查找代价太大，可以通过二分查找进行。

* 多级页表：既让内存连续，又让占用的内存少，类似于书的章目录和节目录

页目录表(章)+页表(节) 页目录中


